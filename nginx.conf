pid /tmp/nginx.pid;
worker_processes 1;
daemon off;

error_log /var/log/nginx/error.log;

events {}

http {
    # Set up logging
    access_log /var/log/nginx/access.log;

    # Enable compression
    gzip on;

    # We’re adding the map block so that the Connection header is correctly set to close when the Upgrade header in the request is set to ''.
    # See https://www.nginx.com/blog/websocket-nginx/
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # List of upstream servers i.e. app instances.
    upstream app_instances  {
        # Consistent hashing will assign the same user to the same app instance across requests.
        # This is helpful for apps that keep local state.
        # Hasing is based on Domino user name, and IP address.
        # An additional 'X-Hash-Identifier' header can also be set on the request as an additional factor.
        # This is useful when benchmarking to simulate distinct (synthetic) users.
        hash '$http_domino_username $http_x_real_ip $http_x_hash_identifier' consistent;

        # This file is generated by the startup script. It contains one entry for each app instance.
        include /tmp/nginx-upstream-partial.conf;
    }

    server {
        # This file is generated by the startup script. It specifies the port the server will listen on.
        include /tmp/nginx-server-partial.conf;

        location / {
            # Reverse proxy settings.
            # See http://nginx.org/en/docs/http/ngx_http_proxy_module.html for additional options that may improve
            # performance for your app's specific usage patterns.
            proxy_pass  http://app_instances;

            # Sets the Host header to be that of the NGINX server.
            proxy_set_header Host $host;

            # WebSocket reverse proxy directives below.
            # See https://nginx.org/en/docs/http/websocket.html
            # and https://www.serverlab.ca/tutorials/linux/web-servers-linux/how-to-configure-nginx-for-websockets/

            # Ensure the IP of the client sending requests to the NGINX is stored in the request header.
            # This allows connections to be traced back to an origin.
            # Without adding this header, all requests to the upstream WebSocket servers will have the NGINX server’s IP address as the source.
            # See https://www.serverlab.ca/tutorials/linux/web-servers-linux/how-to-configure-nginx-for-websockets/
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # This directive converts the incoming connection to HTTP 1.1, which is required to support WebSockets.
            # The older HTTP 1.0 spec does not provide support for WebSockets, and any requests using HTTP 1.0 will fail.
            proxy_http_version 1.1;

            # Converts the proxied connection to type Upgrade. WebSockets only communicate on Upgraded connections.
            proxy_set_header Upgrade $http_upgrade;

            # Ensure the Connection header value is upgrade.
            proxy_set_header Connection "Upgrade";
        }
    }
}
